import * as Discord from 'discord.js';
import * as config from '../config.json';
import { User } from 'discord.js';
import mute from './commands/mute';
import getMamaJoke from './commands/getMamaJoke';

class Bot {
    private client!: Discord.Client;
    private message!: Discord.Message;
    private intervalId: any;

    public start() {
        this.client = new Discord.Client();

        this.client.on('ready', () => {
            console.log(`${this.client.user?.username} has started working`);

            this.client.user?.setActivity('–≤ –ø–æ–ø–µ–Ω–≥–∞–≥–µ–Ω–µ –Ø–Ω–æ—á–∫–∏', { type: "PLAYING" });
        })

        this.client.on('message', async message => {
            this.message = message;

            if (!this.startsWithPrefix()) return;

            const content = message.content.toLowerCase();

            if (content.includes('–ø–æ—à—É—Ç–∏ –ø—Ä–æ –º–∞–º—É')) {
                const joke = getMamaJoke(message);
            } else if (content.includes('–∑–∞–µ–±–∏')) {
                this.intervalId = setInterval(() => message.channel.send('<@298456985807093761>'), 3000)
            } else if (content.includes('–ø–æ–µ–±–∏')) {
                const times = content.match(/\d+/);
                if (!times) {
                    message.channel.send('–°–∫–æ–ª—å–∫–æ –µ–±–∞—Ç—å —Ç–æ, –±—Ä–∞—Ç–≤–∞?');
                    return;
                }

                if (+times![0] > 20) {
                    message.channel.send('–ß–µ—Ç –º–Ω–æ–≥–æ –µ–±–∞—Ç—å –ø—Ä–∏–¥–µ—Ç—Å—è, –¥–∞–≤–∞–π –ø–æ–ª–µ–≥—á–µ');
                    return;
                }

                for (let i = 0; i < +times![0]; i++) {
                    message.channel.send('<@298456985807093761>')
                }
            } else if (content.includes('—Ö–≤–∞—Ç–∏—Ç')) {
                clearInterval(this.intervalId);
                message.channel.send('–õ–∞–¥–Ω–æ –ø–∞—Ü–∞–Ω—ã, –∫–∞–∫ —Å–∫–∞–∂–µ—Ç–µ')
            } else if (message.author.username === 'German') {
                message.channel.send('–û–π –¥–∞ —Ç—ã –≤–æ–æ–±—â–µ –µ–±–ª–æ –∑–∞–≤–∞–ª–∏');
            } else if (!message.author.bot && this.endsWith('–¥–∞')) {
                await this.message.channel.send('–ü–ò–ó–î–ê');
                await message.react('üá±');
                await message.react('üá¥');
                await message.react('üáΩ');
            } else if (!message.author.bot && this.endsWith('–Ω–µ—Ç')) {
                await this.message.channel.send('–ü–ò–î–û–†–ê –û–¢–í–ï–¢');
            } else if (/–º–∞–º–∞ –≥–µ—Ä–º–∞–Ω–∞/i.test(message.content)) {
                message.channel.send('–¢–£–ü–ê–Ø –ü–ò–ó–î–ê');
            } else if (/–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ/i.test(message.content)) {
                message.channel.send('–°–û–°–ê–¢–¨');
            } else if (/–ú–∞—Ä–∫/i.test(message.content)) {
                mute(message);
            }
        })

        this.client.login(config.token);
    }

    private endsWith(ending: string): boolean {
        const regExp: RegExp = new RegExp(`.*${ending}[^–∞-—è–ê-–Øa-zA-Z]*$`, 'i');

        return regExp.test(this.message.content);
    }

    private startsWithPrefix(): boolean {
        return this.message.content.toLowerCase().startsWith(config.prefix);
    }
}

const test = new Bot();
test.start();